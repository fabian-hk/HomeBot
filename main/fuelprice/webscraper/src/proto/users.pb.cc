// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#include "users.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_users_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FuelPrice_users_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_users_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_User_users_2eproto;
namespace users {
class UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class FuelPriceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuelPrice> _instance;
} _FuelPrice_default_instance_;
class UserManagementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserManagement> _instance;
} _UserManagement_default_instance_;
}  // namespace users
static void InitDefaultsUser_users_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::users::_User_default_instance_;
    new (ptr) ::users::User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::users::User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_User_users_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUser_users_2eproto}, {
      &scc_info_FuelPrice_users_2eproto.base,}};

static void InitDefaultsFuelPrice_users_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::users::_FuelPrice_default_instance_;
    new (ptr) ::users::FuelPrice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::users::FuelPrice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FuelPrice_users_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFuelPrice_users_2eproto}, {}};

static void InitDefaultsUserManagement_users_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::users::_UserManagement_default_instance_;
    new (ptr) ::users::UserManagement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::users::UserManagement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UserManagement_users_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUserManagement_users_2eproto}, {
      &scc_info_User_users_2eproto.base,}};

void InitDefaults_users_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_User_users_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FuelPrice_users_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserManagement_users_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_users_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_users_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_users_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_users_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::users::User, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::users::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::users::User, chat_id_),
  PROTOBUF_FIELD_OFFSET(::users::User, username_),
  PROTOBUF_FIELD_OFFSET(::users::User, privs_),
  PROTOBUF_FIELD_OFFSET(::users::User, longitude_),
  PROTOBUF_FIELD_OFFSET(::users::User, latitude_),
  PROTOBUF_FIELD_OFFSET(::users::User, price_limit_),
  PROTOBUF_FIELD_OFFSET(::users::User, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::users::User, fuel_kind_),
  PROTOBUF_FIELD_OFFSET(::users::User, fuel_prices_),
  1,
  0,
  5,
  2,
  3,
  6,
  7,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::users::FuelPrice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::users::FuelPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::users::FuelPrice, name_),
  PROTOBUF_FIELD_OFFSET(::users::FuelPrice, street_),
  PROTOBUF_FIELD_OFFSET(::users::FuelPrice, city_),
  PROTOBUF_FIELD_OFFSET(::users::FuelPrice, price_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::users::UserManagement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::users::UserManagement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::users::UserManagement, users_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::users::User)},
  { 23, 32, sizeof(::users::FuelPrice)},
  { 36, 42, sizeof(::users::UserManagement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::users::_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::users::_FuelPrice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::users::_UserManagement_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_users_2eproto = {
  {}, AddDescriptors_users_2eproto, "users.proto", schemas,
  file_default_instances, TableStruct_users_2eproto::offsets,
  file_level_metadata_users_2eproto, 3, file_level_enum_descriptors_users_2eproto, file_level_service_descriptors_users_2eproto,
};

const char descriptor_table_protodef_users_2eproto[] =
  "\n\013users.proto\022\005users\"\317\001\n\004User\022\017\n\007chat_id"
  "\030\001 \002(\003\022\020\n\010username\030\002 \001(\t\022\020\n\005privs\030\003 \001(\005:"
  "\0013\022\021\n\tlongitude\030\004 \001(\001\022\020\n\010latitude\030\005 \001(\001\022"
  "\030\n\013price_limit\030\006 \001(\001:\0031.5\022\031\n\014lowest_pric"
  "e\030\007 \001(\001:\0031.5\022\021\n\tfuel_kind\030\010 \001(\005\022%\n\013fuel_"
  "prices\030\t \003(\0132\020.users.FuelPrice\"F\n\tFuelPr"
  "ice\022\014\n\004name\030\001 \002(\t\022\016\n\006street\030\002 \002(\t\022\014\n\004cit"
  "y\030\003 \002(\t\022\r\n\005price\030\004 \002(\001\",\n\016UserManagement"
  "\022\032\n\005users\030\001 \003(\0132\013.users.User"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_users_2eproto = {
  false, InitDefaults_users_2eproto, 
  descriptor_table_protodef_users_2eproto,
  "users.proto", &assign_descriptors_table_users_2eproto, 348,
};

void AddDescriptors_users_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_users_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_users_2eproto = []() { AddDescriptors_users_2eproto(); return true; }();
namespace users {

// ===================================================================

void User::InitAsDefaultInstance() {
}
class User::HasBitSetters {
 public:
  static void set_has_chat_id(User* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_username(User* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_privs(User* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_longitude(User* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_latitude(User* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_price_limit(User* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_lowest_price(User* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_fuel_kind(User* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kChatIdFieldNumber;
const int User::kUsernameFieldNumber;
const int User::kPrivsFieldNumber;
const int User::kLongitudeFieldNumber;
const int User::kLatitudeFieldNumber;
const int User::kPriceLimitFieldNumber;
const int User::kLowestPriceFieldNumber;
const int User::kFuelKindFieldNumber;
const int User::kFuelPricesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:users.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      fuel_prices_(from.fuel_prices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lowest_price_) -
    reinterpret_cast<char*>(&chat_id_)) + sizeof(lowest_price_));
  // @@protoc_insertion_point(copy_constructor:users.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_User_users_2eproto.base);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_kind_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(fuel_kind_));
  privs_ = 3;
  price_limit_ = 1.5;
  lowest_price_ = 1.5;
}

User::~User() {
  // @@protoc_insertion_point(destructor:users.User)
  SharedDtor();
}

void User::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_User_users_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:users.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fuel_prices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&chat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuel_kind_) -
        reinterpret_cast<char*>(&chat_id_)) + sizeof(fuel_kind_));
    privs_ = 3;
    price_limit_ = 1.5;
    lowest_price_ = 1.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* User::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<User*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 chat_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_chat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string username = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("users.User.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 privs = 3 [default = 3];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_privs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double longitude = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_longitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double latitude = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_latitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double price_limit = 6 [default = 1.5];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_price_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double lowest_price = 7 [default = 1.5];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_lowest_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int32 fuel_kind = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_fuel_kind(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .users.FuelPrice fuel_prices = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::users::FuelPrice::_InternalParse;
          object = msg->add_fuel_prices();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:users.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_chat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "users.User.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 privs = 3 [default = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_privs(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_longitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_latitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double price_limit = 6 [default = 1.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_price_limit(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lowest_price = 7 [default = 1.5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_lowest_price(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowest_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fuel_kind = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_fuel_kind(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_kind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .users.FuelPrice fuel_prices = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fuel_prices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:users.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:users.User)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:users.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chat_id(), output);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.User.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional int32 privs = 3 [default = 3];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->privs(), output);
  }

  // optional double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // optional double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // optional double price_limit = 6 [default = 1.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price_limit(), output);
  }

  // optional double lowest_price = 7 [default = 1.5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lowest_price(), output);
  }

  // optional int32 fuel_kind = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fuel_kind(), output);
  }

  // repeated .users.FuelPrice fuel_prices = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fuel_prices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->fuel_prices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:users.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:users.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chat_id(), target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.User.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional int32 privs = 3 [default = 3];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->privs(), target);
  }

  // optional double longitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // optional double latitude = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // optional double price_limit = 6 [default = 1.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price_limit(), target);
  }

  // optional double lowest_price = 7 [default = 1.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lowest_price(), target);
  }

  // optional int32 fuel_kind = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fuel_kind(), target);
  }

  // repeated .users.FuelPrice fuel_prices = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fuel_prices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->fuel_prices(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:users.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:users.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 chat_id = 1;
  if (has_chat_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chat_id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .users.FuelPrice fuel_prices = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->fuel_prices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fuel_prices(static_cast<int>(i)));
    }
  }

  // optional string username = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional double longitude = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 fuel_kind = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_kind());
    }

    // optional int32 privs = 3 [default = 3];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privs());
    }

    // optional double price_limit = 6 [default = 1.5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double lowest_price = 7 [default = 1.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:users.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:users.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:users.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:users.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fuel_prices_.MergeFrom(from.fuel_prices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      fuel_kind_ = from.fuel_kind_;
    }
    if (cached_has_bits & 0x00000020u) {
      privs_ = from.privs_;
    }
    if (cached_has_bits & 0x00000040u) {
      price_limit_ = from.price_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      lowest_price_ = from.lowest_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:users.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:users.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fuel_prices())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&fuel_prices_)->InternalSwap(CastToBase(&other->fuel_prices_));
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(fuel_kind_, other->fuel_kind_);
  swap(privs_, other->privs_);
  swap(price_limit_, other->price_limit_);
  swap(lowest_price_, other->lowest_price_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_users_2eproto);
  return ::file_level_metadata_users_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FuelPrice::InitAsDefaultInstance() {
}
class FuelPrice::HasBitSetters {
 public:
  static void set_has_name(FuelPrice* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_street(FuelPrice* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_city(FuelPrice* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_price(FuelPrice* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuelPrice::kNameFieldNumber;
const int FuelPrice::kStreetFieldNumber;
const int FuelPrice::kCityFieldNumber;
const int FuelPrice::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuelPrice::FuelPrice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:users.FuelPrice)
}
FuelPrice::FuelPrice(const FuelPrice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_street()) {
    street_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  price_ = from.price_;
  // @@protoc_insertion_point(copy_constructor:users.FuelPrice)
}

void FuelPrice::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FuelPrice_users_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
}

FuelPrice::~FuelPrice() {
  // @@protoc_insertion_point(destructor:users.FuelPrice)
  SharedDtor();
}

void FuelPrice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FuelPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuelPrice& FuelPrice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FuelPrice_users_2eproto.base);
  return *internal_default_instance();
}


void FuelPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:users.FuelPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      street_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      city_.ClearNonDefaultToEmptyNoArena();
    }
  }
  price_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FuelPrice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FuelPrice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("users.FuelPrice.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required string street = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("users.FuelPrice.street");
        object = msg->mutable_street();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required string city = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("users.FuelPrice.city");
        object = msg->mutable_city();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required double price = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FuelPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:users.FuelPrice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "users.FuelPrice.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string street = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), static_cast<int>(this->street().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "users.FuelPrice.street");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string city = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), static_cast<int>(this->city().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "users.FuelPrice.city");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_price(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:users.FuelPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:users.FuelPrice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FuelPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:users.FuelPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.FuelPrice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string street = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), static_cast<int>(this->street().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.FuelPrice.street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->street(), output);
  }

  // required string city = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.FuelPrice.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->city(), output);
  }

  // required double price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:users.FuelPrice)
}

::google::protobuf::uint8* FuelPrice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:users.FuelPrice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.FuelPrice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string street = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), static_cast<int>(this->street().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.FuelPrice.street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->street(), target);
  }

  // required string city = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), static_cast<int>(this->city().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "users.FuelPrice.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->city(), target);
  }

  // required double price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:users.FuelPrice)
  return target;
}

size_t FuelPrice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:users.FuelPrice)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_street()) {
    // required string street = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->street());
  }

  if (has_city()) {
    // required string city = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());
  }

  if (has_price()) {
    // required double price = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FuelPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:users.FuelPrice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string street = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->street());

    // required string city = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());

    // required double price = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuelPrice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:users.FuelPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const FuelPrice* source =
      ::google::protobuf::DynamicCastToGenerated<FuelPrice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:users.FuelPrice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:users.FuelPrice)
    MergeFrom(*source);
  }
}

void FuelPrice::MergeFrom(const FuelPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:users.FuelPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      street_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FuelPrice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:users.FuelPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuelPrice::CopyFrom(const FuelPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:users.FuelPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuelPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void FuelPrice::Swap(FuelPrice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuelPrice::InternalSwap(FuelPrice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  street_.Swap(&other->street_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
}

::google::protobuf::Metadata FuelPrice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_users_2eproto);
  return ::file_level_metadata_users_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserManagement::InitAsDefaultInstance() {
}
class UserManagement::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserManagement::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserManagement::UserManagement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:users.UserManagement)
}
UserManagement::UserManagement(const UserManagement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:users.UserManagement)
}

void UserManagement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserManagement_users_2eproto.base);
}

UserManagement::~UserManagement() {
  // @@protoc_insertion_point(destructor:users.UserManagement)
  SharedDtor();
}

void UserManagement::SharedDtor() {
}

void UserManagement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserManagement& UserManagement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserManagement_users_2eproto.base);
  return *internal_default_instance();
}


void UserManagement::Clear() {
// @@protoc_insertion_point(message_clear_start:users.UserManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserManagement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserManagement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .users.User users = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::users::User::_InternalParse;
          object = msg->add_users();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserManagement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:users.UserManagement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .users.User users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:users.UserManagement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:users.UserManagement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserManagement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:users.UserManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .users.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:users.UserManagement)
}

::google::protobuf::uint8* UserManagement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:users.UserManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .users.User users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:users.UserManagement)
  return target;
}

size_t UserManagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:users.UserManagement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .users.User users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserManagement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:users.UserManagement)
  GOOGLE_DCHECK_NE(&from, this);
  const UserManagement* source =
      ::google::protobuf::DynamicCastToGenerated<UserManagement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:users.UserManagement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:users.UserManagement)
    MergeFrom(*source);
  }
}

void UserManagement::MergeFrom(const UserManagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:users.UserManagement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void UserManagement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:users.UserManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserManagement::CopyFrom(const UserManagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:users.UserManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserManagement::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void UserManagement::Swap(UserManagement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserManagement::InternalSwap(UserManagement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
}

::google::protobuf::Metadata UserManagement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_users_2eproto);
  return ::file_level_metadata_users_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace users
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::users::User* Arena::CreateMaybeMessage< ::users::User >(Arena* arena) {
  return Arena::CreateInternal< ::users::User >(arena);
}
template<> PROTOBUF_NOINLINE ::users::FuelPrice* Arena::CreateMaybeMessage< ::users::FuelPrice >(Arena* arena) {
  return Arena::CreateInternal< ::users::FuelPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::users::UserManagement* Arena::CreateMaybeMessage< ::users::UserManagement >(Arena* arena) {
  return Arena::CreateInternal< ::users::UserManagement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
