// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#ifndef PROTOBUF_INCLUDED_users_2eproto
#define PROTOBUF_INCLUDED_users_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_users_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_users_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_users_2eproto();
namespace users {
class FuelPrice;
class FuelPriceDefaultTypeInternal;
extern FuelPriceDefaultTypeInternal _FuelPrice_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserManagement;
class UserManagementDefaultTypeInternal;
extern UserManagementDefaultTypeInternal _UserManagement_default_instance_;
}  // namespace users
namespace google {
namespace protobuf {
template<> ::users::FuelPrice* Arena::CreateMaybeMessage<::users::FuelPrice>(Arena*);
template<> ::users::User* Arena::CreateMaybeMessage<::users::User>(Arena*);
template<> ::users::UserManagement* Arena::CreateMaybeMessage<::users::UserManagement>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace users {

// ===================================================================

class User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:users.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .users.FuelPrice fuel_prices = 9;
  int fuel_prices_size() const;
  void clear_fuel_prices();
  static const int kFuelPricesFieldNumber = 9;
  ::users::FuelPrice* mutable_fuel_prices(int index);
  ::google::protobuf::RepeatedPtrField< ::users::FuelPrice >*
      mutable_fuel_prices();
  const ::users::FuelPrice& fuel_prices(int index) const;
  ::users::FuelPrice* add_fuel_prices();
  const ::google::protobuf::RepeatedPtrField< ::users::FuelPrice >&
      fuel_prices() const;

  // optional string username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required int64 chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  ::google::protobuf::int64 chat_id() const;
  void set_chat_id(::google::protobuf::int64 value);

  // optional double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // optional double latitude = 5;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  double latitude() const;
  void set_latitude(double value);

  // optional int32 fuel_kind = 8;
  bool has_fuel_kind() const;
  void clear_fuel_kind();
  static const int kFuelKindFieldNumber = 8;
  ::google::protobuf::int32 fuel_kind() const;
  void set_fuel_kind(::google::protobuf::int32 value);

  // optional int32 privs = 3 [default = 3];
  bool has_privs() const;
  void clear_privs();
  static const int kPrivsFieldNumber = 3;
  ::google::protobuf::int32 privs() const;
  void set_privs(::google::protobuf::int32 value);

  // optional double price_limit = 6 [default = 1.5];
  bool has_price_limit() const;
  void clear_price_limit();
  static const int kPriceLimitFieldNumber = 6;
  double price_limit() const;
  void set_price_limit(double value);

  // optional double lowest_price = 7 [default = 1.5];
  bool has_lowest_price() const;
  void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 7;
  double lowest_price() const;
  void set_lowest_price(double value);

  // @@protoc_insertion_point(class_scope:users.User)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::users::FuelPrice > fuel_prices_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int64 chat_id_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 fuel_kind_;
  ::google::protobuf::int32 privs_;
  double price_limit_;
  double lowest_price_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class FuelPrice final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:users.FuelPrice) */ {
 public:
  FuelPrice();
  virtual ~FuelPrice();

  FuelPrice(const FuelPrice& from);

  inline FuelPrice& operator=(const FuelPrice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuelPrice(FuelPrice&& from) noexcept
    : FuelPrice() {
    *this = ::std::move(from);
  }

  inline FuelPrice& operator=(FuelPrice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FuelPrice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuelPrice* internal_default_instance() {
    return reinterpret_cast<const FuelPrice*>(
               &_FuelPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FuelPrice* other);
  friend void swap(FuelPrice& a, FuelPrice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuelPrice* New() const final {
    return CreateMaybeMessage<FuelPrice>(nullptr);
  }

  FuelPrice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FuelPrice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FuelPrice& from);
  void MergeFrom(const FuelPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuelPrice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string street = 2;
  bool has_street() const;
  void clear_street();
  static const int kStreetFieldNumber = 2;
  const ::std::string& street() const;
  void set_street(const ::std::string& value);
  #if LANG_CXX11
  void set_street(::std::string&& value);
  #endif
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  ::std::string* mutable_street();
  ::std::string* release_street();
  void set_allocated_street(::std::string* street);

  // required string city = 3;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 3;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // required double price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:users.FuelPrice)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr street_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  double price_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class UserManagement final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:users.UserManagement) */ {
 public:
  UserManagement();
  virtual ~UserManagement();

  UserManagement(const UserManagement& from);

  inline UserManagement& operator=(const UserManagement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserManagement(UserManagement&& from) noexcept
    : UserManagement() {
    *this = ::std::move(from);
  }

  inline UserManagement& operator=(UserManagement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserManagement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserManagement* internal_default_instance() {
    return reinterpret_cast<const UserManagement*>(
               &_UserManagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserManagement* other);
  friend void swap(UserManagement& a, UserManagement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserManagement* New() const final {
    return CreateMaybeMessage<UserManagement>(nullptr);
  }

  UserManagement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserManagement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserManagement& from);
  void MergeFrom(const UserManagement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserManagement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .users.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::users::User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::users::User >*
      mutable_users();
  const ::users::User& users(int index) const;
  ::users::User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::users::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:users.UserManagement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::users::User > users_;
  friend struct ::TableStruct_users_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// required int64 chat_id = 1;
inline bool User::has_chat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::clear_chat_id() {
  chat_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int64 User::chat_id() const {
  // @@protoc_insertion_point(field_get:users.User.chat_id)
  return chat_id_;
}
inline void User::set_chat_id(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:users.User.chat_id)
}

// optional string username = 2;
inline bool User::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& User::username() const {
  // @@protoc_insertion_point(field_get:users.User.username)
  return username_.GetNoArena();
}
inline void User::set_username(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:users.User.username)
}
#if LANG_CXX11
inline void User::set_username(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:users.User.username)
}
#endif
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:users.User.username)
}
inline void User::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:users.User.username)
}
inline ::std::string* User::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:users.User.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:users.User.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:users.User.username)
}

// optional int32 privs = 3 [default = 3];
inline bool User::has_privs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::clear_privs() {
  privs_ = 3;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 User::privs() const {
  // @@protoc_insertion_point(field_get:users.User.privs)
  return privs_;
}
inline void User::set_privs(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  privs_ = value;
  // @@protoc_insertion_point(field_set:users.User.privs)
}

// optional double longitude = 4;
inline bool User::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double User::longitude() const {
  // @@protoc_insertion_point(field_get:users.User.longitude)
  return longitude_;
}
inline void User::set_longitude(double value) {
  _has_bits_[0] |= 0x00000004u;
  longitude_ = value;
  // @@protoc_insertion_point(field_set:users.User.longitude)
}

// optional double latitude = 5;
inline bool User::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double User::latitude() const {
  // @@protoc_insertion_point(field_get:users.User.latitude)
  return latitude_;
}
inline void User::set_latitude(double value) {
  _has_bits_[0] |= 0x00000008u;
  latitude_ = value;
  // @@protoc_insertion_point(field_set:users.User.latitude)
}

// optional double price_limit = 6 [default = 1.5];
inline bool User::has_price_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::clear_price_limit() {
  price_limit_ = 1.5;
  _has_bits_[0] &= ~0x00000040u;
}
inline double User::price_limit() const {
  // @@protoc_insertion_point(field_get:users.User.price_limit)
  return price_limit_;
}
inline void User::set_price_limit(double value) {
  _has_bits_[0] |= 0x00000040u;
  price_limit_ = value;
  // @@protoc_insertion_point(field_set:users.User.price_limit)
}

// optional double lowest_price = 7 [default = 1.5];
inline bool User::has_lowest_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void User::clear_lowest_price() {
  lowest_price_ = 1.5;
  _has_bits_[0] &= ~0x00000080u;
}
inline double User::lowest_price() const {
  // @@protoc_insertion_point(field_get:users.User.lowest_price)
  return lowest_price_;
}
inline void User::set_lowest_price(double value) {
  _has_bits_[0] |= 0x00000080u;
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:users.User.lowest_price)
}

// optional int32 fuel_kind = 8;
inline bool User::has_fuel_kind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::clear_fuel_kind() {
  fuel_kind_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 User::fuel_kind() const {
  // @@protoc_insertion_point(field_get:users.User.fuel_kind)
  return fuel_kind_;
}
inline void User::set_fuel_kind(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  fuel_kind_ = value;
  // @@protoc_insertion_point(field_set:users.User.fuel_kind)
}

// repeated .users.FuelPrice fuel_prices = 9;
inline int User::fuel_prices_size() const {
  return fuel_prices_.size();
}
inline void User::clear_fuel_prices() {
  fuel_prices_.Clear();
}
inline ::users::FuelPrice* User::mutable_fuel_prices(int index) {
  // @@protoc_insertion_point(field_mutable:users.User.fuel_prices)
  return fuel_prices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::users::FuelPrice >*
User::mutable_fuel_prices() {
  // @@protoc_insertion_point(field_mutable_list:users.User.fuel_prices)
  return &fuel_prices_;
}
inline const ::users::FuelPrice& User::fuel_prices(int index) const {
  // @@protoc_insertion_point(field_get:users.User.fuel_prices)
  return fuel_prices_.Get(index);
}
inline ::users::FuelPrice* User::add_fuel_prices() {
  // @@protoc_insertion_point(field_add:users.User.fuel_prices)
  return fuel_prices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::users::FuelPrice >&
User::fuel_prices() const {
  // @@protoc_insertion_point(field_list:users.User.fuel_prices)
  return fuel_prices_;
}

// -------------------------------------------------------------------

// FuelPrice

// required string name = 1;
inline bool FuelPrice::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FuelPrice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& FuelPrice::name() const {
  // @@protoc_insertion_point(field_get:users.FuelPrice.name)
  return name_.GetNoArena();
}
inline void FuelPrice::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:users.FuelPrice.name)
}
#if LANG_CXX11
inline void FuelPrice::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:users.FuelPrice.name)
}
#endif
inline void FuelPrice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:users.FuelPrice.name)
}
inline void FuelPrice::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:users.FuelPrice.name)
}
inline ::std::string* FuelPrice::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:users.FuelPrice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelPrice::release_name() {
  // @@protoc_insertion_point(field_release:users.FuelPrice.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelPrice::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:users.FuelPrice.name)
}

// required string street = 2;
inline bool FuelPrice::has_street() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FuelPrice::clear_street() {
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& FuelPrice::street() const {
  // @@protoc_insertion_point(field_get:users.FuelPrice.street)
  return street_.GetNoArena();
}
inline void FuelPrice::set_street(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:users.FuelPrice.street)
}
#if LANG_CXX11
inline void FuelPrice::set_street(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  street_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:users.FuelPrice.street)
}
#endif
inline void FuelPrice::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:users.FuelPrice.street)
}
inline void FuelPrice::set_street(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:users.FuelPrice.street)
}
inline ::std::string* FuelPrice::mutable_street() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:users.FuelPrice.street)
  return street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelPrice::release_street() {
  // @@protoc_insertion_point(field_release:users.FuelPrice.street)
  if (!has_street()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return street_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelPrice::set_allocated_street(::std::string* street) {
  if (street != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:users.FuelPrice.street)
}

// required string city = 3;
inline bool FuelPrice::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FuelPrice::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& FuelPrice::city() const {
  // @@protoc_insertion_point(field_get:users.FuelPrice.city)
  return city_.GetNoArena();
}
inline void FuelPrice::set_city(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:users.FuelPrice.city)
}
#if LANG_CXX11
inline void FuelPrice::set_city(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:users.FuelPrice.city)
}
#endif
inline void FuelPrice::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:users.FuelPrice.city)
}
inline void FuelPrice::set_city(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:users.FuelPrice.city)
}
inline ::std::string* FuelPrice::mutable_city() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:users.FuelPrice.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FuelPrice::release_city() {
  // @@protoc_insertion_point(field_release:users.FuelPrice.city)
  if (!has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return city_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FuelPrice::set_allocated_city(::std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:users.FuelPrice.city)
}

// required double price = 4;
inline bool FuelPrice::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FuelPrice::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FuelPrice::price() const {
  // @@protoc_insertion_point(field_get:users.FuelPrice.price)
  return price_;
}
inline void FuelPrice::set_price(double value) {
  _has_bits_[0] |= 0x00000008u;
  price_ = value;
  // @@protoc_insertion_point(field_set:users.FuelPrice.price)
}

// -------------------------------------------------------------------

// UserManagement

// repeated .users.User users = 1;
inline int UserManagement::users_size() const {
  return users_.size();
}
inline void UserManagement::clear_users() {
  users_.Clear();
}
inline ::users::User* UserManagement::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:users.UserManagement.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::users::User >*
UserManagement::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:users.UserManagement.users)
  return &users_;
}
inline const ::users::User& UserManagement::users(int index) const {
  // @@protoc_insertion_point(field_get:users.UserManagement.users)
  return users_.Get(index);
}
inline ::users::User* UserManagement::add_users() {
  // @@protoc_insertion_point(field_add:users.UserManagement.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::users::User >&
UserManagement::users() const {
  // @@protoc_insertion_point(field_list:users.UserManagement.users)
  return users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace users

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_users_2eproto
