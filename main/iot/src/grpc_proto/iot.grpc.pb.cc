// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: iot.proto

#include "iot.pb.h"
#include "iot.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace iot {

static const char* IOT_method_names[] = {
  "/iot.IOT/SetShadeSchedule",
};

std::unique_ptr< IOT::Stub> IOT::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IOT::Stub> stub(new IOT::Stub(channel));
  return stub;
}

IOT::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetShadeSchedule_(IOT_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IOT::Stub::SetShadeSchedule(::grpc::ClientContext* context, const ::iot::Schedule& request, ::iot::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetShadeSchedule_, context, request, response);
}

void IOT::Stub::experimental_async::SetShadeSchedule(::grpc::ClientContext* context, const ::iot::Schedule* request, ::iot::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetShadeSchedule_, context, request, response, std::move(f));
}

void IOT::Stub::experimental_async::SetShadeSchedule(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::iot::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetShadeSchedule_, context, request, response, std::move(f));
}

void IOT::Stub::experimental_async::SetShadeSchedule(::grpc::ClientContext* context, const ::iot::Schedule* request, ::iot::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetShadeSchedule_, context, request, response, reactor);
}

void IOT::Stub::experimental_async::SetShadeSchedule(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::iot::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetShadeSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::iot::Status>* IOT::Stub::AsyncSetShadeScheduleRaw(::grpc::ClientContext* context, const ::iot::Schedule& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::iot::Status>::Create(channel_.get(), cq, rpcmethod_SetShadeSchedule_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::iot::Status>* IOT::Stub::PrepareAsyncSetShadeScheduleRaw(::grpc::ClientContext* context, const ::iot::Schedule& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::iot::Status>::Create(channel_.get(), cq, rpcmethod_SetShadeSchedule_, context, request, false);
}

IOT::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IOT_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IOT::Service, ::iot::Schedule, ::iot::Status>(
          std::mem_fn(&IOT::Service::SetShadeSchedule), this)));
}

IOT::Service::~Service() {
}

::grpc::Status IOT::Service::SetShadeSchedule(::grpc::ServerContext* context, const ::iot::Schedule* request, ::iot::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iot

